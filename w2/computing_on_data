>> A = [1 2; 3 4; 5 6]
A =

   1   2
   3   4
   5   6

>> B = [11 12; 13 14; 15 16]
B =

   11   12
   13   14
   15   16

>> C = [1 1; 2 2]
C =

   1   1
   2   2

>> A*C
ans =

    5    5
   11   11
   17   17

>> A .* B
ans =

   11   24
   39   56
   75   96

>> A .* B % element wise multiplication
ans =

   11   24
   39   56
   75   96

>> A .^ 2
ans =

    1    4
    9   16
   25   36

>> v = [1; 2; 3]
v =

   1
   2
   3

>> 1 ./v
ans =

   1.00000
   0.50000
   0.33333

>> 1 ./ A
ans =

   1.00000   0.50000
   0.33333   0.25000
   0.20000   0.16667

>> log(v)
ans =

   0.00000
   0.69315
   1.09861

>> exp(v)
ans =

    2.7183
    7.3891
   20.0855

>> abs(v)
ans =

   1
   2
   3

>> abs([-1; 2; -3])
ans =

   1
   2
   3

>> -v
ans =

  -1
  -2
  -3

>> -v % -1 *v
ans =

  -1
  -2
  -3

>> v + ones(length(v), 1) % increment each element of v by 1
ans =

   2
   3
   4

>> v + 1 % add 1 to all elements of v
ans =

   2
   3
   4

>> A' % transpose
ans =

   1   3   5
   2   4   6

>> (A')'
ans =

   1   2
   3   4
   5   6

>>  a = [1 15 2 0.5]
a =

    1.00000   15.00000    2.00000    0.50000

>> val = max(a)
val =  15
>> [val, ind] = max(a)
val =  15
ind =  2
>> max(A) % column wise max
ans =

   5   6

>> a < 3 & element wise comparison
parse error:

  syntax error

>>> a < 3 & element wise comparison
                       ^

>> a < 3 % element wise comparison
ans =

  1  0  1  1

>> find(a < 3) % find indexes of elements that satisfy the condition
ans =

   1   3   4

>> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

>> help magic
'magic' is a function from the file C:\Octave\OCTAVE~1.1\share\octave\4.2.1\m\special-matrix\magic.m

 -- magic (N)

     Create an N-by-N magic square.

     A magic square is an arrangement of the integers '1:n^2' such that
     the row sums, column sums, and diagonal sums are all equal to the
     same value.

     Note: N must be a scalar greater than or equal to 3.  If you supply
     N less than 3, magic returns either a nonmagic square, or else the
     degenerate magic squares 1 and [].

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
>> [r,c] = find(A >= 7) % r = row index, c = column index of elements that satisfy the condition
r =

   1
   3
   2

c =

   1
   2
   3

>> A(1,1)
ans =  8
>> A(3, 2)
ans =  9
>> A(2,3)
ans =  7
>> a
a =

    1.00000   15.00000    2.00000    0.50000

>> sum(a) % sum all elements together
ans =  18.500
>> prod(a) % multiply all elements together
ans =  15
>> floor(a) % round down
ans =

    1   15    2    0

>> ceil(a) % round up
ans =

    1   15    2    1

>> rand(3)
ans =

   0.21949   0.35705   0.39743
   0.89083   0.57985   0.90135
   0.70122   0.70676   0.18285

>> max(rand(3), ramd(3))
error: 'ramd' undefined near line 1 column 14
>> max(rand(3), rand(3))
ans =

   0.96847   0.94851   0.63797
   0.36744   0.91298   0.75264
   0.36859   0.74456   0.69445

>> A
A =

   8   1   6
   3   5   7
   4   9   2

>> max(A, [], 1) % column wise max
ans =

   8   9   7

>> max(A, 1, []) % row wise max
error: invalid conversion from real matrix to real scalar
error: octave_base_value::int_value (): wrong type argument 'null_matrix'
>> max(A, [], 2) % raw wise max
ans =

   8
   7
   9

>> max(A) % column wise max
ans =

   8   9   7

>> max(max(A)) % max A element
ans =  9
>> max(A(:)) % max A element
ans =  9
>> A(:)
ans =

   8
   3
   4
   1
   5
   9
   6
   7
   2

>> A'(:)
ans =

   8
   1
   6
   3
   5
   7
   4
   9
   2

>> A = magic(9)
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

>> sum(A, 1) % per column sum
ans =

   369   369   369   369   369   369   369   369   369

>> sum(A, 2) % per row sum
ans =

   369
   369
   369
   369
   369
   369
   369
   369
   369

>> eye(9)
ans =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

>> A .* eye(9)
ans =

   47    0    0    0    0    0    0    0    0
    0   68    0    0    0    0    0    0    0
    0    0    8    0    0    0    0    0    0
    0    0    0   20    0    0    0    0    0
    0    0    0    0   41    0    0    0    0
    0    0    0    0    0   62    0    0    0
    0    0    0    0    0    0   74    0    0
    0    0    0    0    0    0    0   14    0
    0    0    0    0    0    0    0    0   35

>> sum(sum(A.*eye(9)))
ans =  369
>> flipud(eye(3))
ans =

Permutation Matrix

   0   0   1
   0   1   0
   1   0   0

>> sum(sum(A.*flipud(eye(9))))
ans =  369
>> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

>> pinv(A)
ans =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

>> temp = pinv(A)
temp =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

>> temp * A
ans =

  1.0000e+000  2.0817e-016  -3.1641e-015
  -6.1062e-015  1.0000e+000  6.2450e-015
  3.0531e-015  4.1633e-017  1.0000e+000

>> floor(temp * A)
ans =

   1   0  -1
  -1   0   0
   0   0   0

>> diary off
